# -*- coding: utf-8 -*-
"""PREDICTING CUSTOMER BOOKING USING ML

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1V2w86us7IM2yeLbyy7lyDyJcCf3sbxOz
"""

#LIBRARIES


import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from xgboost import XGBClassifier
!pip install catboost
from catboost import CatBoostClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score, precision_score, recall_score, f1_score
import numpy as np

# DATASET LOADING
data = pd.read_csv('/content/sample_data/customer_booking.csv', encoding="ISO-8859-1")

data.head(7)

data.tail(7)

data.info()

data.describe()

data.shape

data.dtypes

data.columns

# Check for missing values
print("\nMissing values:\n", data.isnull().sum())

# Encode categorical features
label_encoders = {}
for col in data.select_dtypes(include=['object']).columns:
    le = LabelEncoder()
    data[col] = le.fit_transform(data[col])
    label_encoders[col] = le

# Outlier detection using boxplots with green color
plt.figure(figsize=(12, 8))
for i, col in enumerate(data.select_dtypes(include=['float64', 'int64']).columns):
    plt.subplot(4, 4, i+1)
    sns.boxplot(x=data[col], color='green')
    plt.title(f'Boxplot of {col}')
plt.tight_layout()
plt.show()

# Separate bar graphs for selected columns with green color
for col in ['trip_type', 'sales_channel']:
    plt.figure(figsize=(10, 6))
    sns.countplot(y=data[col], color='green')
    plt.title(f'Distribution of {col}')
    plt.xlabel('Count')
    plt.ylabel(col)
    plt.show()

# Prepare features and target variable
X = data.drop('booking_complete', axis=1)
y = data['booking_complete']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Define classifiers
classifiers = {
    'Random Forest': RandomForestClassifier(),
    'Decision Tree': DecisionTreeClassifier(),
    'CatBoost': CatBoostClassifier(silent=True),
    'Logistic Regression': LogisticRegression(),
    'SVM': SVC(),
    'Naive Bayes': GaussianNB(),
    'XGBoost': XGBClassifier(),
    'AdaBoost': AdaBoostClassifier()
}

# Train classifiers and evaluate
results = {}
for name, clf in classifiers.items():
    clf.fit(X_train, y_train)
    y_pred = clf.predict(X_test)

    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    results[name] = {
        'Accuracy': acc,
        'Precision': prec,
        'Recall': rec,
        'F1 Score': f1
    }

    print(f"\n{name} Performance Metrics:")
    print(classification_report(y_test, y_pred))

    # Plot confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(6, 4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Purples', cbar=False)
    plt.title(f'{name} Confusion Matrix')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

# Determine the best classifier based on accuracy
best_classifier = max(results, key=lambda k: results[k]['Accuracy'])
print(f"\nBest classifier based on Accuracy: {best_classifier}")

# Determine the best classifier based on accuracy
best_classifier = max(results, key=lambda k: results[k]['Accuracy'])
print(f"\nBest classifier based on Accuracy: {best_classifier}")